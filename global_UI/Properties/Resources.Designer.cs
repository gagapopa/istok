//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace COTES.ISTOK.Assignment.UI.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("COTES.ISTOK.Assignment.UI.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///USE [$DBNAME]
        ///
        ////****** Object:  Table [dbo].[calc_autonode]    Script Date: 05.12.2013 11:35:45 ******/
        ///SET ANSI_NULLS ON
        ///
        ///SET QUOTED_IDENTIFIER ON
        ///
        ///CREATE TABLE [dbo].[calc_autonode](
        ///	[task_id] [int] NOT NULL,
        ///	[node_id] [int] NOT NULL,
        /// CONSTRAINT [PK_calc_autonode] PRIMARY KEY CLUSTERED 
        ///(
        ///	[task_id] ASC,
        ///	[node_id] ASC
        ///)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
        ///) ON [PRIMARY]
        ///
        ///
        ////****** Object: [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StationCreateCoretables {
            get {
                return ResourceManager.GetString("StationCreateCoretables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [master]
        ///
        ////****** Object:  Database [$DBNAME]    Script Date: 05.12.2013 11:35:45 ******/
        ///CREATE DATABASE [$DBNAME]
        /// CONTAINMENT = NONE
        /// ON  PRIMARY 
        ///( NAME = N&apos;$DBNAME&apos;, FILENAME = N&apos;$DATAPATH\$DBNAME.mdf&apos; , SIZE = 258816KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
        /// LOG ON 
        ///( NAME = N&apos;$DBNAME_log&apos;, FILENAME = N&apos;$LOGPATH\$DBNAME.ldf&apos; , SIZE = 265344KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
        ///
        ///ALTER DATABASE [$DBNAME] SET COMPATIBILITY_LEVEL = 90
        ///
        ///IF (1 = FULLTEXTSERVICEPROPERTY(&apos;IsFullTextI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StationCreateDatabase {
            get {
                return ResourceManager.GetString("StationCreateDatabase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [master]
        ///
        ////****** Object:  Database [$DBNAME]    Script Date: 05.12.2013 11:35:45 ******/
        ///CREATE DATABASE [$DBNAME]
        /// CONTAINMENT = NONE
        /// ON  PRIMARY 
        ///( NAME = N&apos;$DBNAME&apos;, FILENAME = N&apos;$DATAPATH\$DBNAME.mdf&apos; , SIZE = 258816KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
        /// LOG ON 
        ///( NAME = N&apos;$DBNAME_log&apos;, FILENAME = N&apos;$LOGPATH\$DBNAME.ldf&apos; , SIZE = 265344KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
        ///
        ///ALTER DATABASE [$DBNAME] SET COMPATIBILITY_LEVEL = 90
        ///
        ///IF (1 = FULLTEXTSERVICEPROPERTY(&apos;IsFullTextI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StationInsertIntervals {
            get {
                return ResourceManager.GetString("StationInsertIntervals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [master]
        ///
        ////****** Object:  Database [$DBNAME]    Script Date: 05.12.2013 11:35:45 ******/
        ///CREATE DATABASE [$DBNAME]
        /// CONTAINMENT = NONE
        /// ON  PRIMARY 
        ///( NAME = N&apos;$DBNAME&apos;, FILENAME = N&apos;$DATAPATH\$DBNAME.mdf&apos; , SIZE = 258816KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
        /// LOG ON 
        ///( NAME = N&apos;$DBNAME_log&apos;, FILENAME = N&apos;$LOGPATH\$DBNAME.ldf&apos; , SIZE = 265344KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
        ///
        ///ALTER DATABASE [$DBNAME] SET COMPATIBILITY_LEVEL = 90
        ///
        ///IF (1 = FULLTEXTSERVICEPROPERTY(&apos;IsFullTextI [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string StationInsertTypes {
            get {
                return ResourceManager.GetString("StationInsertTypes", resourceCulture);
            }
        }
    }
}
