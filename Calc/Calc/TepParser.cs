// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2008
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.1.136 (2008-11-11)
// Machine:  DMDEVICE
// DateTime: 19.11.2013 11:05:40
// UserName: kolchin
// Input file <D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Text;
using gppg;

namespace COTES.ISTOK.Calc
{
public enum Tokens {
    error=1,EOF=2,lxmIf=3,lxmElse=4,lxmWhile=5,lxmDo=6,
    lxmBreak=7,lxmContinue=8,lxmReturn=9,lxmFunction=10,lxmVar=11,lxmCharacterLiteral=12,
    lxmFloatingLiteral=13,lxmIntegerLiteral=14,lxmStringLiteral=15,lxmAmpersand=16,lxmAmpersandAmpersand=17,lxmAmpersandEqual=18,
    lxmArrow=19,lxmArrowAsterisk=20,lxmAsterisk=21,lxmAsteriskEqual=22,lxmCaret=23,lxmCaretEqual=24,
    lxmColon=25,lxmColonColon=26,lxmCoirana=27,lxmComma=28,lxmDot=29,lxmDotAsterisk=30,
    lxmDotDotDot=31,lxmEqual=32,lxmEqualEqual=33,lxmExclamation=34,lxmGreater=35,lxmGreaterEqual=36,
    lxmGreaterGreater=37,lxmGreaterGreaterEqual=38,lxmLeftBrace=39,lxmLeftBracket=40,lxmLeftParenth=41,lxmLess=42,
    lxmLessEqual=43,lxmLessLess=44,lxmLessLessEqual=45,lxmMinus=46,lxmMinusEqual=47,lxmMinusMinus=48,
    lxmNonEqual=49,lxmPercent=50,lxmPercentEqual=51,lxmPlus=52,lxmPlusEqual=53,lxmPlusPlus=54,
    lxmQuestion=55,lxmRightBrace=56,lxmRightBracket=57,lxmRightParenth=58,lxmSemicolon=59,lxmSlash=60,
    lxmSlashEqual=61,lxmTilde=62,lxmVertical=63,lxmVerticalEqual=64,lxmVerticalVertical=65,lxmIdentifier=66,
    lxmParamIdentifier=67,lxmThrow=68,priUnAsterisk=69,priUnAmpersand=70,priUnPlus=71,priUnMinus=72,
    lxmAuto=73,lxmRegister=74,lxmStatic=75,lxmExtern=76,lxmMutable=77,lxmInline=78,
    lxmVirtual=79,lxmExplicit=80,lxmFriend=81,lxmTypedef=82,lxmConst=83,lxmVolatile=84,
    lxmChar=85,lxmWcharT=86,lxmBool=87,lxmShort=88,lxmInt=89,lxmLong=90,
    lxmSigned=91,lxmUnsigned=92,lxmFloat=93,lxmDouble=94,lxmVoid=95,lxmClass=96,
    lxmEnum=97,lxmTemplate=98,lxmStruct=99,lxmTypename=100,lxmUnion=101,priHighest=102};

public partial struct ValueType
#line 9 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 10 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
	public char ltrChar;
#line 11 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
	public long ltrNum;	// long long
#line 12 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
	public double ltrReal;
#line 13 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
	public String ltrString;
#line 14 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
	public String ltrIdent;
#line 15 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
	public CalcTree expr;
#line 16 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
	public Location loc;
#line 17 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
//	public Symbol symbol;
#line 18 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : IScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class TepParser: ShiftReduceParser<ValueType, LexLocation>
{
    private Dictionary<int, string> aliasses = null;

  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[131];
    AddState(0,new State(new int[]{2,-2,10,-3,14,-5,12,-5,13,-5,15,-5,39,-5,41,-5,66,-5,67,-5,54,-5,48,-5,52,-5,46,-5,34,-5,11,-5,3,-5,5,-5,7,-5,8,-5,9,-5,59,-5},new int[]{-13,1,-15,3,-17,129}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{10,124},new int[]{-16,4}));
    AddState(4,new State(new int[]{14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117},new int[]{-2,5,-3,123,-7,7,-12,59,-8,65,-1,100}));
    AddState(5,new State(new int[]{14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117,2,-4},new int[]{-3,6,-7,7,-12,59,-8,65,-1,100}));
    AddState(6,new State(-66));
    AddState(7,new State(new int[]{59,8,54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,40,52},new int[]{-11,9}));
    AddState(8,new State(-52));
    AddState(9,new State(-15));
    AddState(10,new State(-18));
    AddState(11,new State(-19));
    AddState(12,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,13,-12,59,-8,65}));
    AddState(13,new State(new int[]{54,10,48,11,23,-25,21,-25,60,-25,50,-25,52,-25,46,-25,42,-25,35,-25,43,-25,36,-25,33,-25,49,-25,17,-25,65,-25,32,-25,22,-25,61,-25,51,-25,53,-25,47,-25,40,52,59,-25,57,-25,56,-25,28,-25,58,-25},new int[]{-11,9}));
    AddState(14,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,15,-12,59,-8,65}));
    AddState(15,new State(new int[]{54,10,48,11,23,12,21,-26,60,-26,50,-26,52,-26,46,-26,42,-26,35,-26,43,-26,36,-26,33,-26,49,-26,17,-26,65,-26,32,-26,22,-26,61,-26,51,-26,53,-26,47,-26,40,52,59,-26,57,-26,56,-26,28,-26,58,-26},new int[]{-11,9}));
    AddState(16,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,17,-12,59,-8,65}));
    AddState(17,new State(new int[]{54,10,48,11,23,12,21,-27,60,-27,50,-27,52,-27,46,-27,42,-27,35,-27,43,-27,36,-27,33,-27,49,-27,17,-27,65,-27,32,-27,22,-27,61,-27,51,-27,53,-27,47,-27,40,52,59,-27,57,-27,56,-27,28,-27,58,-27},new int[]{-11,9}));
    AddState(18,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,19,-12,59,-8,65}));
    AddState(19,new State(new int[]{54,10,48,11,23,12,21,-28,60,-28,50,-28,52,-28,46,-28,42,-28,35,-28,43,-28,36,-28,33,-28,49,-28,17,-28,65,-28,32,-28,22,-28,61,-28,51,-28,53,-28,47,-28,40,52,59,-28,57,-28,56,-28,28,-28,58,-28},new int[]{-11,9}));
    AddState(20,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,21,-12,59,-8,65}));
    AddState(21,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,-29,46,-29,42,-29,35,-29,43,-29,36,-29,33,-29,49,-29,17,-29,65,-29,32,-29,22,-29,61,-29,51,-29,53,-29,47,-29,40,52,59,-29,57,-29,56,-29,28,-29,58,-29},new int[]{-11,9}));
    AddState(22,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,23,-12,59,-8,65}));
    AddState(23,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,-30,46,-30,42,-30,35,-30,43,-30,36,-30,33,-30,49,-30,17,-30,65,-30,32,-30,22,-30,61,-30,51,-30,53,-30,47,-30,40,52,59,-30,57,-30,56,-30,28,-30,58,-30},new int[]{-11,9}));
    AddState(24,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,25,-12,59,-8,65}));
    AddState(25,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,-31,35,-31,43,-31,36,-31,33,-31,49,-31,17,-31,65,-31,32,-31,22,-31,61,-31,51,-31,53,-31,47,-31,40,52,59,-31,57,-31,56,-31,28,-31,58,-31},new int[]{-11,9}));
    AddState(26,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,27,-12,59,-8,65}));
    AddState(27,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,-32,35,-32,43,-32,36,-32,33,-32,49,-32,17,-32,65,-32,32,-32,22,-32,61,-32,51,-32,53,-32,47,-32,40,52,59,-32,57,-32,56,-32,28,-32,58,-32},new int[]{-11,9}));
    AddState(28,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,29,-12,59,-8,65}));
    AddState(29,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,-33,35,-33,43,-33,36,-33,33,-33,49,-33,17,-33,65,-33,32,-33,22,-33,61,-33,51,-33,53,-33,47,-33,40,52,59,-33,57,-33,56,-33,28,-33,58,-33},new int[]{-11,9}));
    AddState(30,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,31,-12,59,-8,65}));
    AddState(31,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,-34,35,-34,43,-34,36,-34,33,-34,49,-34,17,-34,65,-34,32,-34,22,-34,61,-34,51,-34,53,-34,47,-34,40,52,59,-34,57,-34,56,-34,28,-34,58,-34},new int[]{-11,9}));
    AddState(32,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,33,-12,59,-8,65}));
    AddState(33,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,-35,49,-35,17,-35,65,-35,32,-35,22,-35,61,-35,51,-35,53,-35,47,-35,40,52,59,-35,57,-35,56,-35,28,-35,58,-35},new int[]{-11,9}));
    AddState(34,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,35,-12,59,-8,65}));
    AddState(35,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,-36,49,-36,17,-36,65,-36,32,-36,22,-36,61,-36,51,-36,53,-36,47,-36,40,52,59,-36,57,-36,56,-36,28,-36,58,-36},new int[]{-11,9}));
    AddState(36,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,37,-12,59,-8,65}));
    AddState(37,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,-37,65,-37,32,-37,22,-37,61,-37,51,-37,53,-37,47,-37,40,52,59,-37,57,-37,56,-37,28,-37,58,-37},new int[]{-11,9}));
    AddState(38,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,39,-12,59,-8,65}));
    AddState(39,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,-38,32,-38,22,-38,61,-38,51,-38,53,-38,47,-38,40,52,59,-38,57,-38,56,-38,28,-38,58,-38},new int[]{-11,9}));
    AddState(40,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,41,-12,59,-8,65}));
    AddState(41,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,40,52,59,-39,57,-39,56,-39,28,-39,58,-39},new int[]{-11,9}));
    AddState(42,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,43,-12,59,-8,65}));
    AddState(43,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,-40,22,-40,61,-40,51,-40,53,-40,47,-40,40,52,59,-40,57,-40,56,-40,28,-40,58,-40},new int[]{-11,9}));
    AddState(44,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,45,-12,59,-8,65}));
    AddState(45,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,-41,22,-41,61,-41,51,-41,53,-41,47,-41,40,52,59,-41,57,-41,56,-41,28,-41,58,-41},new int[]{-11,9}));
    AddState(46,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,47,-12,59,-8,65}));
    AddState(47,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,-42,22,-42,61,-42,51,-42,53,-42,47,-42,40,52,59,-42,57,-42,56,-42,28,-42,58,-42},new int[]{-11,9}));
    AddState(48,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,49,-12,59,-8,65}));
    AddState(49,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,-43,22,-43,61,-43,51,-43,53,-43,47,-43,40,52,59,-43,57,-43,56,-43,28,-43,58,-43},new int[]{-11,9}));
    AddState(50,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,51,-12,59,-8,65}));
    AddState(51,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,-44,22,-44,61,-44,51,-44,53,-44,47,-44,40,52,59,-44,57,-44,56,-44,28,-44,58,-44},new int[]{-11,9}));
    AddState(52,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,53,-12,59,-8,65}));
    AddState(53,new State(new int[]{57,54,54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,40,52},new int[]{-11,9}));
    AddState(54,new State(-47));
    AddState(55,new State(-7));
    AddState(56,new State(-8));
    AddState(57,new State(-9));
    AddState(58,new State(-10));
    AddState(59,new State(-11));
    AddState(60,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-6,61,-7,69,-12,59,-8,65}));
    AddState(61,new State(new int[]{56,62,28,63}));
    AddState(62,new State(-46));
    AddState(63,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,64,-12,59,-8,65}));
    AddState(64,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,40,52,56,-51,28,-51,58,-51},new int[]{-11,9}));
    AddState(65,new State(-12));
    AddState(66,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-6,67,-7,69,-12,59,-8,65}));
    AddState(67,new State(new int[]{58,68,28,63}));
    AddState(68,new State(-45));
    AddState(69,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,40,52,56,-50,28,-50,58,-50},new int[]{-11,9}));
    AddState(70,new State(new int[]{41,72,59,-13,54,-13,48,-13,23,-13,21,-13,60,-13,50,-13,52,-13,46,-13,42,-13,35,-13,43,-13,36,-13,33,-13,49,-13,17,-13,65,-13,32,-13,22,-13,61,-13,51,-13,53,-13,47,-13,40,-13,57,-13,56,-13,28,-13,58,-13},new int[]{-5,71}));
    AddState(71,new State(-16));
    AddState(72,new State(new int[]{58,75,14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-6,73,-7,69,-12,59,-8,65}));
    AddState(73,new State(new int[]{58,74,28,63}));
    AddState(74,new State(-48));
    AddState(75,new State(-49));
    AddState(76,new State(new int[]{41,72,59,-14,54,-14,48,-14,23,-14,21,-14,60,-14,50,-14,52,-14,46,-14,42,-14,35,-14,43,-14,36,-14,33,-14,49,-14,17,-14,65,-14,32,-14,22,-14,61,-14,51,-14,53,-14,47,-14,40,-14,57,-14,56,-14,28,-14,58,-14},new int[]{-5,77}));
    AddState(77,new State(-17));
    AddState(78,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,79,-12,59,-8,65}));
    AddState(79,new State(new int[]{54,-20,48,-20,23,-20,21,-20,60,-20,50,-20,52,-20,46,-20,42,-20,35,-20,43,-20,36,-20,33,-20,49,-20,17,-20,65,-20,32,-20,22,-20,61,-20,51,-20,53,-20,47,-20,40,52,59,-20,57,-20,56,-20,28,-20,58,-20},new int[]{-11,9}));
    AddState(80,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,81,-12,59,-8,65}));
    AddState(81,new State(new int[]{54,-21,48,-21,23,-21,21,-21,60,-21,50,-21,52,-21,46,-21,42,-21,35,-21,43,-21,36,-21,33,-21,49,-21,17,-21,65,-21,32,-21,22,-21,61,-21,51,-21,53,-21,47,-21,40,52,59,-21,57,-21,56,-21,28,-21,58,-21},new int[]{-11,9}));
    AddState(82,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,83,-12,59,-8,65}));
    AddState(83,new State(new int[]{54,10,48,11,23,-22,21,-22,60,-22,50,-22,52,-22,46,-22,42,-22,35,-22,43,-22,36,-22,33,-22,49,-22,17,-22,65,-22,32,-22,22,-22,61,-22,51,-22,53,-22,47,-22,40,52,59,-22,57,-22,56,-22,28,-22,58,-22},new int[]{-11,9}));
    AddState(84,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,85,-12,59,-8,65}));
    AddState(85,new State(new int[]{54,10,48,11,23,-23,21,-23,60,-23,50,-23,52,-23,46,-23,42,-23,35,-23,43,-23,36,-23,33,-23,49,-23,17,-23,65,-23,32,-23,22,-23,61,-23,51,-23,53,-23,47,-23,40,52,59,-23,57,-23,56,-23,28,-23,58,-23},new int[]{-11,9}));
    AddState(86,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,87,-12,59,-8,65}));
    AddState(87,new State(new int[]{54,10,48,11,23,-24,21,-24,60,-24,50,-24,52,-24,46,-24,42,-24,35,-24,43,-24,36,-24,33,-24,49,-24,17,-24,65,-24,32,-24,22,-24,61,-24,51,-24,53,-24,47,-24,40,52,59,-24,57,-24,56,-24,28,-24,58,-24},new int[]{-11,9}));
    AddState(88,new State(new int[]{56,121,14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117},new int[]{-6,61,-2,89,-7,122,-12,59,-8,65,-3,123,-1,100}));
    AddState(89,new State(new int[]{56,90,14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117},new int[]{-3,6,-7,7,-12,59,-8,65,-1,100}));
    AddState(90,new State(-63));
    AddState(91,new State(new int[]{66,96},new int[]{-10,92,-9,99}));
    AddState(92,new State(new int[]{59,93,28,94}));
    AddState(93,new State(-53));
    AddState(94,new State(new int[]{66,96},new int[]{-9,95}));
    AddState(95,new State(-69));
    AddState(96,new State(new int[]{32,97,59,-70,28,-70}));
    AddState(97,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,98,-12,59,-8,65}));
    AddState(98,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,40,52,59,-71,28,-71},new int[]{-11,9}));
    AddState(99,new State(-68));
    AddState(100,new State(-54));
    AddState(101,new State(new int[]{41,118},new int[]{-4,102}));
    AddState(102,new State(new int[]{14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117},new int[]{-3,103,-7,7,-12,59,-8,65,-1,100}));
    AddState(103,new State(new int[]{4,104,14,-55,12,-55,13,-55,15,-55,39,-55,41,-55,66,-55,67,-55,54,-55,48,-55,52,-55,46,-55,34,-55,11,-55,3,-55,5,-55,7,-55,8,-55,9,-55,59,-55,2,-55,56,-55}));
    AddState(104,new State(new int[]{14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117},new int[]{-3,105,-7,7,-12,59,-8,65,-1,100}));
    AddState(105,new State(-56));
    AddState(106,new State(new int[]{41,118},new int[]{-4,107}));
    AddState(107,new State(new int[]{14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117},new int[]{-3,108,-7,7,-12,59,-8,65,-1,100}));
    AddState(108,new State(-57));
    AddState(109,new State(new int[]{59,110}));
    AddState(110,new State(-58));
    AddState(111,new State(new int[]{59,112}));
    AddState(112,new State(-59));
    AddState(113,new State(new int[]{59,116,14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,114,-12,59,-8,65}));
    AddState(114,new State(new int[]{59,115,54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,40,52},new int[]{-11,9}));
    AddState(115,new State(-60));
    AddState(116,new State(-61));
    AddState(117,new State(-62));
    AddState(118,new State(new int[]{14,55,12,56,13,57,15,58,39,60,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86},new int[]{-7,119,-12,59,-8,65}));
    AddState(119,new State(new int[]{58,120,54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,40,52},new int[]{-11,9}));
    AddState(120,new State(-67));
    AddState(121,new State(-64));
    AddState(122,new State(new int[]{54,10,48,11,23,12,21,14,60,16,50,18,52,20,46,22,42,24,35,26,43,28,36,30,33,32,49,34,17,36,65,38,32,40,22,42,61,44,51,46,53,48,47,50,59,8,40,52,56,-50,28,-50},new int[]{-11,9}));
    AddState(123,new State(-65));
    AddState(124,new State(new int[]{66,125}));
    AddState(125,new State(new int[]{41,72},new int[]{-5,126}));
    AddState(126,new State(new int[]{39,128},new int[]{-1,127}));
    AddState(127,new State(-72));
    AddState(128,new State(new int[]{56,121,14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117},new int[]{-2,89,-3,123,-7,7,-12,59,-8,65,-1,100}));
    AddState(129,new State(new int[]{14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117},new int[]{-2,130,-3,123,-7,7,-12,59,-8,65,-1,100}));
    AddState(130,new State(new int[]{14,55,12,56,13,57,15,58,39,88,41,66,66,70,67,76,54,78,48,80,52,82,46,84,34,86,11,91,3,101,5,106,7,109,8,111,9,113,59,117,2,-6},new int[]{-3,6,-7,7,-12,59,-8,65,-1,100}));

    rules=new Rule[73];
    rules[1]=new Rule(-14, new int[]{-13,2});
    rules[2]=new Rule(-13, new int[]{});
    rules[3]=new Rule(-15, new int[]{});
    rules[4]=new Rule(-13, new int[]{-15,-16,-2});
    rules[5]=new Rule(-17, new int[]{});
    rules[6]=new Rule(-13, new int[]{-17,-2});
    rules[7]=new Rule(-7, new int[]{14});
    rules[8]=new Rule(-7, new int[]{12});
    rules[9]=new Rule(-7, new int[]{13});
    rules[10]=new Rule(-7, new int[]{15});
    rules[11]=new Rule(-7, new int[]{-12});
    rules[12]=new Rule(-7, new int[]{-8});
    rules[13]=new Rule(-7, new int[]{66});
    rules[14]=new Rule(-7, new int[]{67});
    rules[15]=new Rule(-7, new int[]{-7,-11});
    rules[16]=new Rule(-7, new int[]{66,-5});
    rules[17]=new Rule(-7, new int[]{67,-5});
    rules[18]=new Rule(-7, new int[]{-7,54});
    rules[19]=new Rule(-7, new int[]{-7,48});
    rules[20]=new Rule(-7, new int[]{54,-7});
    rules[21]=new Rule(-7, new int[]{48,-7});
    rules[22]=new Rule(-7, new int[]{52,-7});
    rules[23]=new Rule(-7, new int[]{46,-7});
    rules[24]=new Rule(-7, new int[]{34,-7});
    rules[25]=new Rule(-7, new int[]{-7,23,-7});
    rules[26]=new Rule(-7, new int[]{-7,21,-7});
    rules[27]=new Rule(-7, new int[]{-7,60,-7});
    rules[28]=new Rule(-7, new int[]{-7,50,-7});
    rules[29]=new Rule(-7, new int[]{-7,52,-7});
    rules[30]=new Rule(-7, new int[]{-7,46,-7});
    rules[31]=new Rule(-7, new int[]{-7,42,-7});
    rules[32]=new Rule(-7, new int[]{-7,35,-7});
    rules[33]=new Rule(-7, new int[]{-7,43,-7});
    rules[34]=new Rule(-7, new int[]{-7,36,-7});
    rules[35]=new Rule(-7, new int[]{-7,33,-7});
    rules[36]=new Rule(-7, new int[]{-7,49,-7});
    rules[37]=new Rule(-7, new int[]{-7,17,-7});
    rules[38]=new Rule(-7, new int[]{-7,65,-7});
    rules[39]=new Rule(-7, new int[]{-7,32,-7});
    rules[40]=new Rule(-7, new int[]{-7,22,-7});
    rules[41]=new Rule(-7, new int[]{-7,61,-7});
    rules[42]=new Rule(-7, new int[]{-7,51,-7});
    rules[43]=new Rule(-7, new int[]{-7,53,-7});
    rules[44]=new Rule(-7, new int[]{-7,47,-7});
    rules[45]=new Rule(-8, new int[]{41,-6,58});
    rules[46]=new Rule(-12, new int[]{39,-6,56});
    rules[47]=new Rule(-11, new int[]{40,-7,57});
    rules[48]=new Rule(-5, new int[]{41,-6,58});
    rules[49]=new Rule(-5, new int[]{41,58});
    rules[50]=new Rule(-6, new int[]{-7});
    rules[51]=new Rule(-6, new int[]{-6,28,-7});
    rules[52]=new Rule(-3, new int[]{-7,59});
    rules[53]=new Rule(-3, new int[]{11,-10,59});
    rules[54]=new Rule(-3, new int[]{-1});
    rules[55]=new Rule(-3, new int[]{3,-4,-3});
    rules[56]=new Rule(-3, new int[]{3,-4,-3,4,-3});
    rules[57]=new Rule(-3, new int[]{5,-4,-3});
    rules[58]=new Rule(-3, new int[]{7,59});
    rules[59]=new Rule(-3, new int[]{8,59});
    rules[60]=new Rule(-3, new int[]{9,-7,59});
    rules[61]=new Rule(-3, new int[]{9,59});
    rules[62]=new Rule(-3, new int[]{59});
    rules[63]=new Rule(-1, new int[]{39,-2,56});
    rules[64]=new Rule(-1, new int[]{39,56});
    rules[65]=new Rule(-2, new int[]{-3});
    rules[66]=new Rule(-2, new int[]{-2,-3});
    rules[67]=new Rule(-4, new int[]{41,-7,58});
    rules[68]=new Rule(-10, new int[]{-9});
    rules[69]=new Rule(-10, new int[]{-10,28,-9});
    rules[70]=new Rule(-9, new int[]{66});
    rules[71]=new Rule(-9, new int[]{66,32,-7});
    rules[72]=new Rule(-16, new int[]{10,66,-5,-1});

    nonTerminals = new string[] {"", "CompoundStatement", "StatementSeq", 
      "Statement", "Condition", "CallOrConvTail", "Expression", "GeneralExpression", 
      "ParenthesizedExpression", "Declarator", "DeclaratorList", "ArrayTail", 
      "ArrayDefenition", "TranslationUnit", "$accept", "Anon@1", "FunctionDefenition", 
      "Anon@2", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // TranslationUnit -> /* empty */
#line 95 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ retValue = null; }
        break;
      case 3: // Anon@1 -> /* empty */
#line 97 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ retValue = null; }
        break;
      case 4: // TranslationUnit -> Anon@1, FunctionDefenition, StatementSeq
#line 97 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ retValue = value_stack.array[value_stack.top-1].expr; }
        break;
      case 5: // Anon@2 -> /* empty */
#line 98 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ retValue = null; }
        break;
      case 6: // TranslationUnit -> Anon@2, StatementSeq
#line 98 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ retValue = value_stack.array[value_stack.top-1].expr; }
        break;
      case 7: // GeneralExpression -> lxmIntegerLiteral
#line 102 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 103 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.DoubleValue, (double)value_stack.array[value_stack.top-1].ltrNum);
#line 104 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 105 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 106 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 8: // GeneralExpression -> lxmCharacterLiteral
#line 107 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 108 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.StringValue, value_stack.array[value_stack.top-1].ltrChar.ToString());
#line 109 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 110 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 111 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 9: // GeneralExpression -> lxmFloatingLiteral
#line 112 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 113 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.DoubleValue, (double)value_stack.array[value_stack.top-1].ltrReal);
#line 114 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 115 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 116 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 10: // GeneralExpression -> lxmStringLiteral
#line 117 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 118 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.StringValue, value_stack.array[value_stack.top-1].ltrString.ToString());
#line 119 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 120 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 121 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 11: // GeneralExpression -> ArrayDefenition
#line 122 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-1].expr; }
        break;
      case 12: // GeneralExpression -> ParenthesizedExpression
#line 123 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-1].expr; }
        break;
      case 13: // GeneralExpression -> lxmIdentifier
#line 124 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 125 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Variable, value_stack.array[value_stack.top-1].ltrIdent.ToString());
#line 126 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 127 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 128 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 14: // GeneralExpression -> lxmParamIdentifier
#line 129 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 130 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Parameter, value_stack.array[value_stack.top-1].ltrIdent.ToString());
#line 131 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 132 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 133 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 15: // GeneralExpression -> GeneralExpression, ArrayTail
#line 135 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 136 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.ArrayAccessor);
#line 137 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 138 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-2].expr);
#line 139 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 140 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 141 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 16: // GeneralExpression -> lxmIdentifier, CallOrConvTail
#line 162 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 163 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Call, value_stack.array[value_stack.top-2].ltrIdent.ToString());
#line 164 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 165 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    if ( value_stack.array[value_stack.top-1].expr != null)
#line 166 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        if(value_stack.array[value_stack.top-1].expr.CalcOperator == CalcTree.Operator.Comma)
#line 167 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        {
#line 168 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                            tree.Branches.AddRange(value_stack.array[value_stack.top-1].expr.Branches);
#line 169 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        } else
#line 170 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        {
#line 171 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                            tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 172 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        }
#line 173 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 174 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 17: // GeneralExpression -> lxmParamIdentifier, CallOrConvTail
#line 175 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 176 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
									CalcTree tree = new CalcTree(CalcTree.Operator.Parameter, value_stack.array[value_stack.top-2].ltrIdent.ToString());
#line 177 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 178 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    if ( value_stack.array[value_stack.top-1].expr != null)
#line 179 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        if(value_stack.array[value_stack.top-1].expr.CalcOperator == CalcTree.Operator.Comma)
#line 180 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        {
#line 181 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                            tree.Branches.AddRange(value_stack.array[value_stack.top-1].expr.Branches);
#line 182 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        } else
#line 183 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        {
#line 184 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                            tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 185 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        }
#line 186 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 187 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 18: // GeneralExpression -> GeneralExpression, lxmPlusPlus
#line 188 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 189 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.IncrementSuffix);
#line 190 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 191 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-2].expr);
#line 192 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 193 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 19: // GeneralExpression -> GeneralExpression, lxmMinusMinus
#line 194 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 195 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.DecrementSuffix);
#line 196 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 197 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-2].expr);
#line 198 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 199 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 20: // GeneralExpression -> lxmPlusPlus, GeneralExpression
#line 201 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 202 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.IncrementPrefix);
#line 203 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 204 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 205 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 206 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 21: // GeneralExpression -> lxmMinusMinus, GeneralExpression
#line 207 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 208 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.DecrementPrefix);
#line 209 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 210 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 211 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 212 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 22: // GeneralExpression -> lxmPlus, GeneralExpression
#line 214 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-1].expr; }
        break;
      case 23: // GeneralExpression -> lxmMinus, GeneralExpression
#line 215 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 216 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.UnaryMinus);
#line 217 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 218 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 219 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 220 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 24: // GeneralExpression -> lxmExclamation, GeneralExpression
#line 221 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 222 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.LogicalNot);
#line 223 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 224 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 225 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 226 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 25: // GeneralExpression -> GeneralExpression, lxmCaret, GeneralExpression
#line 230 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 231 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Power);
#line 232 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 233 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 234 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 235 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 236 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 26: // GeneralExpression -> GeneralExpression, lxmAsterisk, GeneralExpression
#line 238 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 239 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Multiplication);
#line 240 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 241 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 242 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 243 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 244 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 27: // GeneralExpression -> GeneralExpression, lxmSlash, GeneralExpression
#line 245 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 246 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Division);
#line 247 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 248 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 249 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 250 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 251 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 28: // GeneralExpression -> GeneralExpression, lxmPercent, GeneralExpression
#line 252 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 253 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Modulo);
#line 254 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 255 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 256 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 257 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 258 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 29: // GeneralExpression -> GeneralExpression, lxmPlus, GeneralExpression
#line 260 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 261 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Addition);
#line 262 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 263 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 264 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 265 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 266 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 30: // GeneralExpression -> GeneralExpression, lxmMinus, GeneralExpression
#line 267 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 268 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Subtraction);
#line 269 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 270 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 271 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 272 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 273 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 31: // GeneralExpression -> GeneralExpression, lxmLess, GeneralExpression
#line 275 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 276 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Less);
#line 277 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 278 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 279 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 280 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 281 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 32: // GeneralExpression -> GeneralExpression, lxmGreater, GeneralExpression
#line 282 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 283 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Greater);
#line 284 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 285 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 286 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 287 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 288 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 33: // GeneralExpression -> GeneralExpression, lxmLessEqual, GeneralExpression
#line 289 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 290 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.LessOrEqual);
#line 291 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 292 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 293 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 294 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 295 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 34: // GeneralExpression -> GeneralExpression, lxmGreaterEqual, GeneralExpression
#line 296 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 297 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.GreaterOrEqual);
#line 298 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 299 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 300 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 301 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 302 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 35: // GeneralExpression -> GeneralExpression, lxmEqualEqual, GeneralExpression
#line 304 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 305 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Equal);
#line 306 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 307 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 308 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 309 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 310 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 36: // GeneralExpression -> GeneralExpression, lxmNonEqual, GeneralExpression
#line 311 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 312 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.NotEqual);
#line 313 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 314 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 315 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 316 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 317 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 37: // GeneralExpression -> GeneralExpression, lxmAmpersandAmpersand, 
               //                      GeneralExpression
#line 319 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 320 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.LogicalAnd);
#line 321 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 322 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 323 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 324 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 325 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 38: // GeneralExpression -> GeneralExpression, lxmVerticalVertical, GeneralExpression
#line 327 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 328 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.LogicalOr);
#line 329 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 330 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 331 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 332 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 333 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 39: // GeneralExpression -> GeneralExpression, lxmEqual, GeneralExpression
#line 335 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 336 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.Assignment);
#line 337 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 338 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 339 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 340 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 341 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 40: // GeneralExpression -> GeneralExpression, lxmAsteriskEqual, GeneralExpression
#line 342 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 343 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.MultiplicationAssignment);
#line 344 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 345 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 346 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 347 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 348 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 41: // GeneralExpression -> GeneralExpression, lxmSlashEqual, GeneralExpression
#line 349 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 350 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.DivisionAssignment);
#line 351 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 352 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 353 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 354 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 355 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 42: // GeneralExpression -> GeneralExpression, lxmPercentEqual, GeneralExpression
#line 356 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 357 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.ModuloAssignment);
#line 358 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 359 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 360 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 361 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 362 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 43: // GeneralExpression -> GeneralExpression, lxmPlusEqual, GeneralExpression
#line 363 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 364 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.AdditionAssignment);
#line 365 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 366 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 367 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 368 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 369 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 44: // GeneralExpression -> GeneralExpression, lxmMinusEqual, GeneralExpression
#line 370 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 371 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.SubtractionAssignment);
#line 372 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 373 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 374 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 375 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 376 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 45: // ParenthesizedExpression -> lxmLeftParenth, Expression, lxmRightParenth
#line 380 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-2].expr; }
        break;
      case 46: // ArrayDefenition -> lxmLeftBrace, Expression, lxmRightBrace
#line 390 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 391 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.ArrayValue);
#line 392 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-3].loc;
#line 393 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    if ( value_stack.array[value_stack.top-2].expr != null)
#line 394 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        if(value_stack.array[value_stack.top-2].expr.CalcOperator == CalcTree.Operator.Comma)
#line 395 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        {
#line 396 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                            tree.Branches.AddRange(value_stack.array[value_stack.top-2].expr.Branches);
#line 397 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        } else
#line 398 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        {
#line 399 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                            tree.Branches.Add(value_stack.array[value_stack.top-2].expr);
#line 400 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        }
#line 401 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 402 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 47: // ArrayTail -> lxmLeftBracket, GeneralExpression, lxmRightBracket
#line 405 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-2].expr; }
        break;
      case 48: // CallOrConvTail -> lxmLeftParenth, Expression, lxmRightParenth
#line 408 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-2].expr; }
        break;
      case 49: // CallOrConvTail -> lxmLeftParenth, lxmRightParenth
#line 409 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = null; }
        break;
      case 50: // Expression -> GeneralExpression
#line 414 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-1].expr; }
        break;
      case 51: // Expression -> Expression, lxmComma, GeneralExpression
#line 415 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 416 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree;
#line 417 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    
#line 418 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    if(value_stack.array[value_stack.top-3].expr.CalcOperator==CalcTree.Operator.Comma)
#line 419 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    {
#line 420 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree = value_stack.array[value_stack.top-3].expr;
#line 421 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    }
#line 422 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    else 
#line 423 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    {
#line 424 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree = new CalcTree(CalcTree.Operator.Comma);    
#line 425 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree.Location = new Location(value_stack.array[value_stack.top-3].expr.Location.sLin, value_stack.array[value_stack.top-3].expr.Location.sCol, value_stack.array[value_stack.top-1].expr.Location.eLin, value_stack.array[value_stack.top-1].expr.Location.eCol);
#line 426 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 427 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    }
#line 428 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 429 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 430 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 52: // Statement -> GeneralExpression, lxmSemicolon
#line 435 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-2].expr; }
        break;
      case 53: // Statement -> lxmVar, DeclaratorList, lxmSemicolon
#line 436 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-2].expr; }
        break;
      case 54: // Statement -> CompoundStatement
#line 437 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 438 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    if (value_stack.array[value_stack.top-1].expr == null)
#line 439 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    {
#line 440 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        CalcTree tree = new CalcTree(CalcTree.Operator.EmptyStatement);
#line 441 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree.Location = value_stack.array[value_stack.top-1].loc;
#line 442 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        yyval.expr = tree;
#line 443 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    }
#line 444 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    else yyval.expr = value_stack.array[value_stack.top-1].expr;
#line 445 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 55: // Statement -> lxmIf, Condition, Statement
#line 447 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 448 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.IfStatement);
#line 449 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-3].loc;
#line 450 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-2].expr);
#line 451 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 452 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    //tree.Branches.Add(null);
                                    yyval.expr = tree;
#line 453 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 56: // Statement -> lxmIf, Condition, Statement, lxmElse, Statement
#line 455 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 456 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.IfStatement);
#line 457 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-5].loc;
#line 458 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-4].expr);
#line 459 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 460 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 461 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 462 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 57: // Statement -> lxmWhile, Condition, Statement
#line 463 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 464 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.WhileStatement);
#line 465 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-3].loc;
#line 466 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-2].expr);
#line 467 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 468 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 469 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 58: // Statement -> lxmBreak, lxmSemicolon
#line 472 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 473 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.BreakStatement);
#line 474 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 475 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 476 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 59: // Statement -> lxmContinue, lxmSemicolon
#line 477 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 478 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.ContinueStatement);
#line 479 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 480 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 481 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 60: // Statement -> lxmReturn, GeneralExpression, lxmSemicolon
#line 482 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 483 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.RetStatement);
#line 484 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-3].loc;
#line 485 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-2].expr);
#line 486 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 487 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 61: // Statement -> lxmReturn, lxmSemicolon
#line 488 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 489 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.RetStatement);
#line 490 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-2].loc;
#line 491 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    //tree.Branches.Add(null);
                                    yyval.expr = tree;
#line 492 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 62: // Statement -> lxmSemicolon
#line 496 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 497 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.EmptyStatement);
#line 498 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 499 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 500 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 63: // CompoundStatement -> lxmLeftBrace, StatementSeq, lxmRightBrace
#line 503 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-2].expr; }
        break;
      case 64: // CompoundStatement -> lxmLeftBrace, lxmRightBrace
#line 504 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = null; }
        break;
      case 65: // StatementSeq -> Statement
#line 508 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 509 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.CompositeStatement);
#line 510 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 511 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 512 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 513 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 66: // StatementSeq -> StatementSeq, Statement
#line 514 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ value_stack.array[value_stack.top-2].expr.Branches.Add(value_stack.array[value_stack.top-1].expr); yyval.expr = value_stack.array[value_stack.top-2].expr; }
        break;
      case 67: // Condition -> lxmLeftParenth, GeneralExpression, lxmRightParenth
#line 518 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-2].expr; }
        break;
      case 68: // DeclaratorList -> Declarator
#line 522 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ yyval.expr = value_stack.array[value_stack.top-1].expr; }
        break;
      case 69: // DeclaratorList -> DeclaratorList, lxmComma, Declarator
#line 523 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 524 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree;
#line 525 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    
#line 526 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    if(value_stack.array[value_stack.top-3].expr.CalcOperator==CalcTree.Operator.Comma)
#line 527 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    {
#line 528 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree = value_stack.array[value_stack.top-3].expr;
#line 529 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    }
#line 530 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    else 
#line 531 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    {
#line 532 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree = new CalcTree(CalcTree.Operator.Comma);    
#line 533 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree.Location = new Location(value_stack.array[value_stack.top-3].expr.Location.sLin, value_stack.array[value_stack.top-3].expr.Location.sCol, value_stack.array[value_stack.top-1].expr.Location.eLin, value_stack.array[value_stack.top-1].expr.Location.eCol);
#line 534 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                        tree.Branches.Add(value_stack.array[value_stack.top-3].expr);
#line 535 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    }
#line 536 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 537 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 538 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 70: // Declarator -> lxmIdentifier
#line 541 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{
#line 542 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.VariableDeclaration, value_stack.array[value_stack.top-1].ltrIdent.ToString());
#line 543 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = value_stack.array[value_stack.top-1].loc;
#line 544 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 545 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
      case 71: // Declarator -> lxmIdentifier, lxmEqual, GeneralExpression
#line 546 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
{ 
#line 547 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    CalcTree tree = new CalcTree(CalcTree.Operator.VariableDeclaration, value_stack.array[value_stack.top-3].ltrIdent.ToString());
#line 548 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Location = new Location(value_stack.array[value_stack.top-3].loc.sLin, value_stack.array[value_stack.top-3].loc.sCol, value_stack.array[value_stack.top-1].loc.eLin, value_stack.array[value_stack.top-1].loc.eCol);
#line 549 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    tree.Branches.Add(value_stack.array[value_stack.top-1].expr);
#line 550 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                    yyval.expr = tree;
#line 551 "D:\kody\dev\TFS\ISTOK\src\Calc\Calc\tepparser.y"
                                }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString())
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
